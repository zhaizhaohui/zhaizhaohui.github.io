(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{351:function(v,_,t){"use strict";t.r(_);var a=t(8),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"ssr和ssg底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssr和ssg底层原理"}},[v._v("#")]),v._v(" SSR和SSG底层原理")]),v._v(" "),_("p",[v._v("以下将详细介绍服务器端渲染（SSR，Server-Side Rendering）和静态站点生成（SSG，Static Site Generation）的底层原理：")]),v._v(" "),_("h2",{attrs:{id:"服务器端渲染-ssr-底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器端渲染-ssr-底层原理"}},[v._v("#")]),v._v(" 服务器端渲染（SSR）底层原理")]),v._v(" "),_("h3",{attrs:{id:"_1、-基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、-基本概念"}},[v._v("#")]),v._v(" 1、 基本概念")]),v._v(" "),_("p",[v._v("服务器端渲染是指在服务器端将页面渲染成完整的HTML字符串，然后再将这个HTML字符串发送给客户端浏览器。客户端浏览器接收到这个HTML后，就可以直接进行展示，后续可能还会结合JavaScript进行交互等进一步的操作。")]),v._v(" "),_("h3",{attrs:{id:"_2、工作流程及原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、工作流程及原理"}},[v._v("#")]),v._v(" 2、工作流程及原理")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("请求接收")]),v._v("：\n"),_("ul",[_("li",[v._v("当客户端（如浏览器）向服务器发起一个页面请求时，服务器首先接收到这个请求。这个请求可能包含了一些参数，比如查询字符串、请求头信息等，这些信息可能会影响到页面的渲染内容。")])])]),v._v(" "),_("li",[_("strong",[v._v("数据获取")]),v._v("：\n"),_("ul",[_("li",[v._v("服务器根据请求的相关信息，确定需要获取哪些数据来渲染页面。这些数据可能来自数据库、文件系统、其他API等各种数据源。例如，如果是一个电商页面请求，可能需要从数据库中获取商品信息、用户信息等相关数据。")]),v._v(" "),_("li",[v._v("服务器通常会使用相应的编程语言和框架提供的工具或库来进行数据获取操作。比如在Node.js环境下，可能会使用 "),_("code",[v._v("axios")]),v._v(" 等库来发送HTTP请求获取外部数据，或者使用数据库驱动程序（如针对MySQL的 "),_("code",[v._v("mysql2")]),v._v(" 库）来从数据库中获取数据。")])])]),v._v(" "),_("li",[_("strong",[v._v("页面渲染")]),v._v("：\n"),_("ul",[_("li",[v._v("在获取到所需的数据后，服务器会使用一种渲染引擎（如在Node.js中常用的 "),_("code",[v._v("React")]),v._v(" 或 "),_("code",[v._v("Vue")]),v._v(" 等框架结合相应的服务器端渲染库）将页面模板和数据结合起来进行渲染。以React为例，服务器会使用 "),_("code",[v._v("ReactDOMServer.renderToString()")]),v._v(" 函数（在React 16及以后版本中还可以使用 "),_("code",[v._v("ReactDOMServer.renderToNodeStream()")]),v._v(" 函数进行流式渲染，提高性能）将React组件渲染成HTML字符串。")]),v._v(" "),_("li",[v._v("这个渲染过程类似于在客户端浏览器中进行渲染，但不同的是它是在服务器端完成的，而且此时不需要考虑浏览器的一些特性（如DOM操作等），只需要按照既定的模板和数据生成完整的HTML内容。")])])]),v._v(" "),_("li",[_("strong",[v._v("HTML发送")]),v._v("：\n"),_("ul",[_("li",[v._v("一旦页面渲染完成，服务器就会将生成的HTML字符串作为响应内容发送给客户端浏览器。客户端浏览器接收到这个HTML后，会按照正常的浏览器渲染流程（如解析HTML、加载样式表、执行JavaScript等）对其进行处理，不过此时由于已经有了完整的HTML内容，浏览器可以更快地展示出页面的大致内容，而不是像纯客户端渲染那样需要等待JavaScript加载并执行完才能看到完整的页面效果。")])])]),v._v(" "),_("li",[_("strong",[v._v("后续交互（可选）")]),v._v("：\n"),_("ul",[_("li",[v._v("虽然页面已经在服务器端渲染并发送给了客户端，但通常情况下，为了实现页面的交互功能（如点击按钮、表单提交等），还会在客户端加载相应的JavaScript代码。这些JavaScript代码会在浏览器中被执行，并且可以对已经渲染好的页面进行更新、添加交互逻辑等操作。例如，在React SSR应用中，客户端会加载 "),_("code",[v._v("ReactDOM.hydrate()")]),v._v(" 函数来“激活”已经渲染好的页面，使其能够响应后续的交互操作。")])])])]),v._v(" "),_("h2",{attrs:{id:"静态站点生成-ssg-底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态站点生成-ssg-底层原理"}},[v._v("#")]),v._v(" 静态站点生成（SSG）底层原理")]),v._v(" "),_("h3",{attrs:{id:"_1-基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[v._v("#")]),v._v(" 1. 基本概念")]),v._v(" "),_("p",[v._v("静态站点生成是指在构建阶段（通常是在开发完成后进行一次集中构建），将网站的所有页面或者部分页面预先渲染成静态的HTML文件，然后在部署阶段将这些静态HTML文件部署到服务器上，当客户端请求访问时，直接将对应的静态HTML文件发送给客户端浏览器进行展示。")]),v._v(" "),_("h3",{attrs:{id:"_2-工作流程及原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-工作流程及原理"}},[v._v("#")]),v._v(" 2. 工作流程及原理")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("数据获取（构建时）")]),v._v("：\n"),_("ul",[_("li",[v._v("在构建阶段，首先要确定需要生成哪些页面以及每个页面需要哪些数据来进行渲染。这些数据同样可能来自各种数据源，如数据库、文件系统、API等。")]),v._v(" "),_("li",[v._v("与SSR不同的是，SSG是在构建时一次性获取所有页面所需的数据，而不是像SSR那样根据每个客户端请求去获取数据。例如，如果要生成一个博客网站的所有文章页面，会在构建时从数据库中获取所有文章的内容、作者信息等相关数据。")])])]),v._v(" "),_("li",[_("strong",[v._v("页面渲染（构建时）")]),v._v("：\n"),_("ul",[_("li",[v._v("拿到数据后，会使用相应的渲染引擎（如 "),_("code",[v._v("React")]),v._v("、"),_("code",[v._v("Vue")]),v._v(" 等框架结合其静态站点生成工具或库）将页面模板和数据结合起来进行渲染。以Vue为例，使用 "),_("code",[v._v("vue-cli-plugin-ssg")]),v._v(" 插件（假设在Vue项目中使用）可以实现SSG功能，在构建时它会按照既定的模板和数据将每个需要生成的页面渲染成静态HTML文件。")]),v._v(" "),_("li",[v._v("这个渲染过程与SSR中的渲染过程有相似之处，但由于是在构建时进行，所以不需要考虑实时的客户端请求等因素，只需要专注于按照模板和数据生成高质量的静态HTML文件。")])])]),v._v(" "),_("li",[_("strong",[v._v("静态HTML文件生成（构建时）")]),v._v("：\n"),_("ul",[_("li",[v._v("在页面渲染完成后，会将渲染好的每个页面的HTML内容保存为一个独立的静态HTML文件。这些文件通常会按照一定的目录结构进行组织，以便于在部署时能够方便地找到对应页面的文件。例如，在一个博客网站中，可能会将每篇文章的页面HTML文件按照文章的发布日期或者标题等进行分类存放。")])])]),v._v(" "),_("li",[_("strong",[v._v("部署")]),v._v("：\n"),_("ul",[_("li",[v._v("在构建完成后，会将生成的所有静态HTML文件以及可能需要的其他静态资源（如样式表、图片等）一起部署到服务器上。服务器可以是普通的Web服务器（如Apache、Nginx等），也可以是专门的静态文件托管平台（如Netlify、Vercel等）。")])])]),v._v(" "),_("li",[_("strong",[v._v("请求响应（客户端访问时）")]),v._v("：\n"),_("ul",[_("li",[v._v("当客户端（如浏览器）向服务器请求访问某个页面时，服务器会直接从已经部署好的静态HTML文件中找到对应的文件，然后将其作为响应内容发送给客户端浏览器。由于是直接发送静态HTML文件，所以客户端浏览器接收到后可以快速地进行展示，而且不需要像纯客户端渲染那样等待大量的JavaScript加载和执行来完成页面渲染。")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);