(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{319:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器的垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的垃圾回收机制"}},[t._v("#")]),t._v(" 浏览器的垃圾回收机制")]),t._v(" "),s("p",[t._v("浏览器的垃圾回收机制是用于自动管理内存的一种重要机制，它能够识别并回收那些不再被程序使用的内存空间，以防止内存泄漏，确保浏览器能够高效稳定地运行。")]),t._v(" "),s("h2",{attrs:{id:"_1、为什么需要垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、为什么需要垃圾回收机制"}},[t._v("#")]),t._v(" 1、为什么需要垃圾回收机制？")]),t._v(" "),s("p",[t._v("在浏览器环境中，当我们编写JavaScript代码时，会不断地创建各种对象，比如函数调用时创建的局部变量对象、通过 "),s("code",[t._v("new")]),t._v(" 关键字创建的实例对象等。这些对象在使用过程中会占用一定的内存空间。")]),t._v(" "),s("p",[t._v("然而，当这些对象不再被程序所需要时（比如函数执行完毕后其内部的局部变量就不再有用，或者某个对象的所有引用都被断开），如果不及时清理它们所占用的内存，就会导致内存被无效占用，随着程序的运行，可用内存会越来越少，最终可能引发内存泄漏，使浏览器变得卡顿甚至崩溃。")]),t._v(" "),s("p",[t._v("所以，需要一种机制能够自动检测并回收这些不再被使用的内存，这就是垃圾回收机制存在的意义。")]),t._v(" "),s("h2",{attrs:{id:"_2、垃圾回收的主要方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、垃圾回收的主要方式"}},[t._v("#")]),t._v(" 2、垃圾回收的主要方式")]),t._v(" "),s("p",[t._v("浏览器中常见的垃圾回收方式有以下两种：")]),t._v(" "),s("h3",{attrs:{id:"_1-标记-清除-mark-and-clear"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记-清除-mark-and-clear"}},[t._v("#")]),t._v(" 1. 标记-清除（Mark-and-Clear）")]),t._v(" "),s("p",[t._v("这是一种比较经典且应用广泛的垃圾回收算法。")]),t._v(" "),s("p",[t._v("其基本原理如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("标记阶段")]),t._v("：\n"),s("ul",[s("li",[t._v("垃圾回收器会从根对象（Root Object）开始遍历整个JavaScript对象图。根对象通常包括全局对象（如在浏览器环境中的 "),s("code",[t._v("window")]),t._v(" 对象）、当前正在执行的函数的局部变量对象以及其他一些在JavaScript运行时环境中被定义为根的对象。")]),t._v(" "),s("li",[t._v("对于从根对象能够直接或间接访问到的对象，垃圾回收器会将它们标记为“存活”状态。也就是说，这些对象目前被认为是正在被程序使用的，不应该被回收。")])])]),t._v(" "),s("li",[s("strong",[t._v("清除阶段")]),t._v("：\n"),s("ul",[s("li",[t._v("在标记阶段完成后，垃圾回收器会再次遍历整个对象图，这次它会重点关注那些没有被标记为“存活”的对象。")]),t._v(" "),s("li",[t._v("这些未被标记的对象就被认定为是不再被使用的垃圾对象，垃圾回收器会将它们所占用的内存空间进行回收，以便释放给其他程序使用。")])])])]),t._v(" "),s("p",[t._v("例如，假设我们有如下一段JavaScript代码：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object2'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj1的引用被赋给了全局对象，所以它会被标记为存活")]),t._v("\n    window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj2没有其他引用，在函数执行完毕后会被认定为垃圾    ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("在上述代码中，当 "),s("code",[t._v("test")]),t._v(" 函数执行完毕后，"),s("code",[t._v("obj2")]),t._v(" 因为没有其他引用（除了在函数内部的局部引用，而函数已经执行完毕），所以在标记-清除垃圾回收机制下，它会在清除阶段被认定为垃圾对象并被回收其占用的内存空间，而 "),s("code",[t._v("obj1")]),t._v(" 因为被赋给了全局对象 "),s("code",[t._v("window")]),t._v("，所以它会被标记为存活状态，不会被回收。")]),t._v(" "),s("h3",{attrs:{id:"_2-引用计数-reference-counting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用计数-reference-counting"}},[t._v("#")]),t._v(" 2. 引用计数（Reference Counting）")]),t._v(" "),s("p",[t._v("引用计数也是一种用于垃圾回收的算法，其原理相对简单：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("计数规则")]),t._v("：\n"),s("ul",[s("li",[t._v("对于每一个JavaScript对象，都会有一个引用计数。当一个对象被创建时，其引用计数初始化为1。")]),t._v(" "),s("li",[t._v("每当有一个新的引用指向这个对象时，其引用计数就会增加1；每当一个引用与这个对象断开时，其引用计数就会减少1。")])])]),t._v(" "),s("li",[s("strong",[t._v("回收判断")]),t._v("：\n"),s("ul",[s("li",[t._v("当一个对象的引用计数变为0时，就表示这个对象不再被任何程序所使用，此时它就被认定为垃圾对象，垃圾回收器会将其占用的内存空间进行回收。")])])])]),t._v(" "),s("p",[t._v("例如，考虑以下代码：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时obj1的引用计数为2，因为有obj1本身的引用和obj2的引用 ")]),t._v("\nobj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时obj1的引用计数变为1，因为obj1本身的引用被断开了，只剩下obj2的引用 ")]),t._v("\nobj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时obj1和obj2所指向的那个对象的引用计数变为0，会被认定为垃圾对象并被回收 ")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在上述代码中，通过不断地改变对象的引用关系，使得对象的引用计数发生变化，当引用计数最终变为0时，该对象就会被垃圾回收器认定为垃圾对象并被回收其占用的内存空间。")]),t._v(" "),s("p",[t._v("不过，引用计数算法存在一个比较严重的问题，即循环引用。 例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCircularReference")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object2'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" circularReferences "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCircularReference")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使在这里我们不再使用circularReferences这个变量，但是由于obj1和obj2之间存在循环引用， ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 它们的引用计数永远不会变为0，所以按照引用计数算法，它们不会被回收，可能导致内存泄漏")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在上述代码中，"),s("code",[t._v("obj1")]),t._v(" 和 "),s("code",[t._v("obj2")]),t._v(" 之间存在循环引用，即使在程序的其他部分不再使用它们所组成的这个整体，按照引用计数算法，它们的引用计数永远不会变为0，所以它们不会被回收，这就可能导致内存泄漏的问题。")]),t._v(" "),s("h2",{attrs:{id:"_3、哪些对象会被垃圾回收机制回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、哪些对象会被垃圾回收机制回收"}},[t._v("#")]),t._v(" 3、哪些对象会被垃圾回收机制回收？")]),t._v(" "),s("h3",{attrs:{id:"_1-局部变量对象-函数执行完毕后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-局部变量对象-函数执行完毕后"}},[t._v("#")]),t._v(" 1. 局部变量对象（函数执行完毕后）")]),t._v(" "),s("p",[t._v("当一个函数执行完毕后，在函数内部定义的局部变量（除了那些被闭包引用或者以其他方式保持引用的情况外）所指向的对象通常会被回收。 例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" localObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'local object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里对localObject进行了一些操作，比如 ")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("localObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当函数执行完毕，localObject所指向的对象大概率会被垃圾回收机制回收，    ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为它只在函数内部有局部引用，函数结束后就没有其他引用途径了 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exampleFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("在上述例子中，"),s("code",[t._v("localObject")]),t._v(" 是在函数 "),s("code",[t._v("exampleFunction")]),t._v(" 内部定义的局部变量，一旦函数执行完毕，除非有其他特殊情况（如闭包引用等），它所指向的对象就会成为可回收对象。")]),t._v(" "),s("h3",{attrs:{id:"_2-不再有引用的对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-不再有引用的对象"}},[t._v("#")]),t._v(" 2. 不再有引用的对象")]),t._v(" "),s("p",[t._v("如果一个对象之前有引用，但所有指向它的引用都被断开了，那么这个对象就会被认定为可回收对象。 比如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" globalObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAndReleaseObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" releasedObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'released object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    globalObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" releasedObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时releasedObject有一个引用，通过globalObject指向它     globalObject = null;     ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在releasedObject没有任何引用了，它所指向的对象将会被垃圾回收机制回收 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAndReleaseObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在这个例子中，首先创建了 "),s("code",[t._v("releasedObject")]),t._v(" 并通过 "),s("code",[t._v("globalObject")]),t._v(" 建立了一个引用，但是当 "),s("code",[t._v("globalObject")]),t._v(" 被设置为 "),s("code",[t._v("null")]),t._v(" 时，"),s("code",[t._v("releasedObject")]),t._v(" 所指向的对象就没有了任何引用，从而会被回收。")]),t._v(" "),s("h3",{attrs:{id:"_3-对象数组中的元素-当数组被重新赋值或不再被引用时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象数组中的元素-当数组被重新赋值或不再被引用时"}},[t._v("#")]),t._v(" 3. 对象数组中的元素（当数组被重新赋值或不再被引用时）")]),t._v(" "),s("p",[t._v("对于对象数组，如果数组本身被重新赋值或者不再被引用，那么数组中的元素所指向的对象可能会被回收。 例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" objectArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj2'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况一：重新赋值数组 ")]),t._v("\nobjectArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时原来objectArray中的两个对象所指向的对象大概率会被垃圾回收机制回收， 因为原来的数组已经不再引用它们了 ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况二：数组不再被引用 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" anotherVariable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nanotherVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objectArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nanotherVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同样，原来objectArray中的对象所指向的对象也可能会被垃圾回收机制回收，因为没有任何变量再引用原来的那个数组了")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在上述两种情况中，由于数组与其中元素所指向的对象之间的引用关系发生了变化，使得这些对象有可能成为可回收对象。")]),t._v(" "),s("h3",{attrs:{id:"_4-循环引用对象-在采用标记-清除算法的情况下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-循环引用对象-在采用标记-清除算法的情况下"}},[t._v("#")]),t._v(" 4. 循环引用对象（在采用标记-清除算法的情况下）")]),t._v(" "),s("p",[t._v("在采用标记- - 清除垃圾回收算法的浏览器中，对于存在循环引用的对象，如果从根对象（如全局对象、当前正在执行的函数的局部变量对象等）无法间接访问到它们，那么这些循环引用对象所指向的对象也会被回收。 例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCircularReferences")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj2'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("other "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设这里没有将obj1或obj2以任何方式与根对象建立联系，比如没有通过全局对象引用它们等     ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" circularReferences "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCircularReferences")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在标记-清除算法下，circularReferences所包含的obj1和obj2所指向的对象可能会被回收，因为它们无法从根对象间接访问到，属于不可达对象")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在这个例子中，"),s("code",[t._v("obj1")]),t._v(" 和 "),s("code",[t._v("obj2")]),t._v(" 存在循环引用，但如果它们没有与根对象建立有效的联系，那么在标记-清除算法下，它们所指向的对象就会被视为可回收对象。")]),t._v(" "),s("p",[t._v("不过需要注意的是，在采用引用计数算法的情况下，循环引用对象不会被回收（这也是引用计数算法的一个弊端），除非通过其他方式打破循环引用，使得对象的引用计数变为0。")]),t._v(" "),s("h2",{attrs:{id:"_4、如何减少垃圾回收的次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、如何减少垃圾回收的次数"}},[t._v("#")]),t._v(" 4、如何减少垃圾回收的次数？")]),t._v(" "),s("p",[t._v("减少垃圾回收的次数，可以从以下几个方面入手：")]),t._v(" "),s("h3",{attrs:{id:"_1、合理管理对象引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、合理管理对象引用"}},[t._v("#")]),t._v(" 1、合理管理对象引用")]),t._v(" "),s("h4",{attrs:{id:"_1-避免不必要的对象创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-避免不必要的对象创建"}},[t._v("#")]),t._v(" 1. 避免不必要的对象创建")]),t._v(" "),s("p",[t._v("在编写代码时，尽量避免频繁创建只使用一次或短期内不需要再次使用的对象。 例如，在循环中如果每次迭代都创建一个新的对象，可能会导致大量对象在短时间内被创建然后丢弃，增加垃圾回收的负担。")]),t._v(" "),s("p",[t._v("对比以下两种情况：")]),t._v(" "),s("p",[s("strong",[t._v("情况一：频繁创建新对象")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对newObj进行一些简单操作，比如 ")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("在上述代码中，每次循环迭代都会创建一个新的 "),s("code",[t._v("{ value: i }")]),t._v(" 对象，循环结束后这些对象可能很快就会成为垃圾对象等待回收。")]),t._v(" "),s("p",[s("strong",[t._v("情况二：复用对象（如果可行）")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reusableObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    reusableObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对reusableObj进行一些简单操作，比如 ")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reusableObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("这里通过复用一个对象 "),s("code",[t._v("reusableObj")]),t._v("，减少了不必要的对象创建，从而降低了产生垃圾对象的可能性，进而有助于减少垃圾回收的次数。")]),t._v(" "),s("h4",{attrs:{id:"_2-及时断开不再需要的引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-及时断开不再需要的引用"}},[t._v("#")]),t._v(" 2. 及时断开不再需要的引用")]),t._v(" "),s("p",[t._v("当一个对象不再被使用时，及时将指向它的引用设置为 "),s("code",[t._v("null")]),t._v("，以便垃圾回收机制能够更容易地识别出该对象为可回收对象。 例如：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("someFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tempObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用tempObj进行一些操作     ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当不再需要tempObj时，将其引用断开    ")]),t._v("\n    tempObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("在上述函数中，当完成对 "),s("code",[t._v("tempObj")]),t._v(" 的使用后，通过将其引用设置为 "),s("code",[t._v("null")]),t._v("，使得该对象更有可能被垃圾回收机制回收，并且如果大量类似的引用能及时断开，可减少内存中无效占用的对象数量，降低垃圾回收的频率。")]),t._v(" "),s("h3",{attrs:{id:"_2、优化数据结构和内存使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、优化数据结构和内存使用"}},[t._v("#")]),t._v(" 2、优化数据结构和内存使用")]),t._v(" "),s("h4",{attrs:{id:"_1-选择合适的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择合适的数据结构"}},[t._v("#")]),t._v(" 1. 选择合适的数据结构")]),t._v(" "),s("p",[t._v("不同的数据结构在内存使用和垃圾回收方面可能有不同的表现。例如：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("数组与对象")]),t._v("：\n"),s("ul",[s("li",[t._v("在某些情况下，如果只需要存储一组简单的值，使用数组可能比使用对象更节省内存且更利于垃圾回收。因为对象通常会有一些额外的开销（如属性名的存储等）。")])])])]),t._v(" "),s("p",[t._v("对比以下两种存储方式：")]),t._v(" "),s("p",[s("strong",[t._v("使用对象存储")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" objStorage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("使用数组存储")]),t._v(" "),s("code",[t._v("let arrayStorage = [1, 2, 3];")]),t._v(" 如果只是单纯存储这三个值，数组的内存占用可能相对更小，并且在后续处理过程中，如果这些值不再被需要，数组作为一个整体更容易被垃圾回收机制处理（比如当数组的引用被断开时），而对象可能需要分别判断每个属性的引用情况。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("Set与Array")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("Set数据结构在处理不重复元素集合时很有用，但它在内存使用上可能比普通数组有一定的额外开销。如果应用场景中并不严格需要Set的去重等特性，使用普通数组可能会更利于减少垃圾回收次数。")])])]),t._v(" "),s("li",[s("p",[t._v("例如，若只是简单记录一些元素，且不担心元素重复问题：")]),t._v(" "),s("p",[s("strong",[t._v("使用Set")])]),t._v(" "),s("p",[s("code",[t._v("let setStorage = new Set([1, 2, 3]);")])]),t._v(" "),s("p",[s("strong",[t._v("使用数组")])]),t._v(" "),s("p",[s("code",[t._v("let arrayStorage = [1, 2, 3];")])]),t._v(" "),s("p",[t._v("在这种情况下，选择数组可能更合适，因为它在内存使用和后续垃圾回收处理上可能更简单高效。")])])]),t._v(" "),s("h4",{attrs:{id:"_2-合理使用缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-合理使用缓存"}},[t._v("#")]),t._v(" 2. 合理使用缓存")]),t._v(" "),s("p",[t._v("对于一些经常需要重复使用的数据或计算结果，可以考虑使用缓存机制。")]),t._v(" "),s("p",[t._v("通过缓存，可以避免重复创建对象或进行相同的计算，从而减少垃圾回收的触发。")]),t._v(" "),s("p",[t._v("例如，在一个函数中，如果每次调用都要进行复杂的计算来得到一个结果，而这个结果在一段时间内不会发生变化，那么可以设置一个缓存变量来存储这个结果。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expensiveFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        \n        cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进行复杂计算得到结果，比如计算一个大型矩阵的乘积等        ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在上述函数中，第一次调用时会进行复杂计算并将结果存储在 "),s("code",[t._v("cache")]),t._v(" 中，后续调用时直接从缓存中获取结果，避免了再次进行相同的计算以及可能由此产生的新对象创建，进而有助于减少垃圾回收的次数。")]),t._v(" "),s("h3",{attrs:{id:"_3、优化函数调用和闭包使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、优化函数调用和闭包使用"}},[t._v("#")]),t._v(" 3、优化函数调用和闭包使用")]),t._v(" "),s("p",[t._v("1、减少函数嵌套深度 过多的函数嵌套会导致更多的局部变量被创建，并且在函数执行完毕后，这些局部变量所指向的对象可能会成为垃圾对象等待回收。尽量保持函数嵌套的简洁，减少不必要的嵌套层次。")]),t._v(" "),s("p",[t._v("例如： "),s("strong",[t._v("复杂的函数嵌套")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("outerFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerFunction1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerFunction2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" localObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'local object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对localObj进行一些操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerFunction2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerFunction1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("在上述代码中，由于存在多层函数嵌套，当最内层函数 "),s("code",[t._v("innerFunction2")]),t._v(" 执行完毕后，"),s("code",[t._v("localObj")]),t._v(" 所指向的对象可能会成为垃圾对象。")]),t._v(" "),s("p",[t._v("如果能简化函数结构，减少嵌套层次，可降低产生垃圾对象的数量，从而减少垃圾回收的次数。")]),t._v(" "),s("p",[t._v("2、谨慎使用闭包 闭包虽然是一种很有用的编程技巧，但如果使用不当，可能会导致对象无法被回收。当一个闭包引用了外部函数的局部变量时，即使外部函数已经执行完毕，这些被引用的局部变量所指向的对象也不会被回收，因为闭包仍然持有对它们的引用。")]),t._v(" "),s("p",[t._v("例如： "),s("strong",[t._v("可能导致内存问题的闭包使用")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("outerFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" outerObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'outer object'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outerObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" closureFunction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("outerFunction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使outerFunction已经执行完毕，outerObj所指向的对象不会被回收， ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为closureFunction这个闭包仍然引用着它")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("在上述代码中，"),s("code",[t._v("closureFunction")]),t._v(" 是一个闭包，它引用了 "),s("code",[t._v("outerFunction")]),t._v(" 的局部变量 "),s("code",[t._v("outerObj")]),t._v("，所以 "),s("code",[t._v("outerObj")]),t._v(" 所指向的对象不会被回收。")]),t._v(" "),s("p",[t._v("在使用闭包时，要谨慎考虑是否真的需要保留对外部函数局部变量的引用，如果不需要，尽量避免这种情况，以减少因闭包导致的无法回收对象的情况，进而减少垃圾回收的次数。")]),t._v(" "),s("h2",{attrs:{id:"_5、现代浏览器的综合运用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、现代浏览器的综合运用"}},[t._v("#")]),t._v(" 5、现代浏览器的综合运用")]),t._v(" "),s("p",[t._v("现代浏览器一般不会单纯地只使用一种垃圾回收算法，而是会综合运用多种垃圾回收方式，并结合一些优化策略来提高垃圾回收的效率和准确性。")]),t._v(" "),s("p",[t._v("例如，Chrome浏览器主要采用标记-清除算法作为其垃圾回收的基础，但在一些特定情况下也会使用引用计数算法的一些特性来辅助垃圾回收。")]),t._v(" "),s("p",[t._v("同时，Chrome还会根据不同的对象类型（如DOM对象、JavaScript普通对象等）采用不同的回收策略，并且会定期对内存进行监控和优化，以确保浏览器的内存使用处于良好状态。")])])}),[],!1,null,null,null);s.default=e.exports}}]);